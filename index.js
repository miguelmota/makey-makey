var HID = require('node-hid');
var util = require('util');
var events = require('events');

// Key buffer codes
var KEYS = {
  CLICK: [0x01, 0x01, 0x00, 0x00, 0x00],
  SPACE: [0x02, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00],
  UP: [0x02, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00],
  DOWN: [0x02, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00],
  LEFT: [0x02, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00],
  RIGHT: [0x02, 0x00, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00],

  W: [0x02, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00], // D5
  A: [0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00], // D4
  S: [0x02, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00], // D3
  D: [0x02, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00], // D2
  F: [0x02, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00], // D1
  G: [0x02, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00], // D0

  A5: [0x01, 0x00, 0x00, 0xd8, 0x00], // up scroll
  A4: [0x01, 0x00, 0x00, 0x04, 0x00], // down scroll
  A3: [0x01, 0x00, 0x00, 0xf0, 0x00], // left scroll
  A2: [0x01, 0x00, 0x00, 0x0c, 0x00], // right scroll
  A1: [0x01, 0x01, 0x00, 0x00, 0x00], // right click
  A0: [0x01, 0x02, 0x00, 0x00, 0x00]  // left click
};


// Initialize buffers
for (var key in KEYS) {
  if (KEYS.hasOwnProperty(key)) {
    KEYS[key] = new Buffer(KEYS[key]);
  }
}

function bufferEqual(a, b) {
  for (var i = 0; i < a.length; i++) {
    if (a[i] !== b[i]) return false;
  }

  return true;
}

function getAllDevices() {
  return HID.devices(9025, 32822);
}

function MaKeyMaKey(index) {
  index = index || 0;

  var devices = getAllDevices();
  if (!devices.length) {
    throw new Error('MaKey MaKey could not be found.');
  }

  if (index > devices.length || index < 0) {
    throw new Error(['Index ', index, ' out of range, only ', devices.length, ' MaKey MaKey found'].join(''));
  }

  this.hid = new HID.HID(devices[index].path);

  this.hid.on('data', function(data) {
    for (var key in KEYS) {
      if (KEYS.hasOwnProperty(key)) {
        if (bufferEqual(data, KEYS[key])) {
          this.emit(key.toLowerCase(), data);
        }
      }
    }
  }.bind(this));

  this.hid.on('error', function(error) {
    throw error;
  });

  this.hid.read(function(err, data) {

  });

}

util.inherits(MaKeyMaKey, events.EventEmitter);

module.exports = {
  MaKeyMaKey: MaKeyMaKey,
  deviceCount: function () {
    return getAllDevices().length;
  }
};
